name: E2E test
on: [push]
jobs:
  test:
    timeout-minutes: 10
    name: ${{ matrix.node }} and ${{ matrix.os }}

    env:
<<<<<<< HEAD
      DATABASE_URL: postgresql://calendsoPostgres@calendso-dev:%23indywise123@calendso-dev.postgres.database.azure.com:5432/postgres
      NODE_ENV: test
      BASE_URL: https://calendso-dev.azurewebsites.net
      GOOGLE_API_CREDENTIALS:
        {
          "web":
            {
              "client_id": "20957776680-kriiokf2iud4sg036ebro9ek02fvir3g.apps.googleusercontent.com",
              "project_id": "sacred-lane-322616",
              "auth_uri": "https://accounts.google.com/o/oauth2/auth",
              "token_uri": "https://oauth2.googleapis.com/token",
              "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
              "client_secret": "wXqyswgifZhTYnk4neHIJjhT",
              "redirect_uris":
                [
                  "https://calendso-dev.azurewebsites.net/api/integrations/googlecalendar/callback",
                  "https://calendso-prod.azurewebsites.net/api/integrations/googlecalendar/callback",
                ],
            },
        }
=======
      DATABASE_URL: postgresql://postgres:@localhost:5432/calendso
      BASE_URL: http://localhost:3000
      JWT_SECRET: secret
      GOOGLE_API_CREDENTIALS: "{}"
      # GOOGLE_API_CREDENTIALS: ${{ secrets.CI_GOOGLE_API_CREDENTIALS }}
>>>>>>> f3c95fa3de5b90859fde71cfe387dec8cc064fba
      # CRON_API_KEY: xxx
      # CALENDSO_ENCRYPTION_KEY: xxx
      NEXTAUTH_URL: https://calendso-dev.azurewebsites.net
      # EMAIL_FROM: xxx
      # EMAIL_SERVER_HOST: xxx
      # EMAIL_SERVER_PORT: xxx
      # EMAIL_SERVER_USER: xxx
      MS_GRAPH_CLIENT_ID: ad6e0c53-b181-46bb-9346-7232d5834dd5
      MS_GRAPH_CLIENT_SECRET: x1L5f_RsybD-3RNk~9a8hq--jk_QzytR69 # ZOOM_CLIENT_ID: xxx
      # ZOOM_CLIENT_SECRET: xxx
    services:
      postgres:
        image: postgres:13.3
        env:
          POSTGRES_USER: calendsoPostgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: ["14.x"]
        os: [ubuntu-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Use Node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Install deps
        uses: bahmutov/npm-install@v1
      - name: Next.js cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}-nextjs

      - run: npm test
      - run: npm prisma migrate deploy
      - run: npm db-seed
      - run: npm build
      - run: npm start &
      - run: npx wait-port 3000 --timeout 10000
<<<<<<< HEAD
      - run: npm playwright install-deps
      - run: npm test-playwright
=======

      - name: Cache playwright binaries
        uses: actions/cache@v2
        id: playwright-cache
        with:
          path: |
            ~/Library/Caches/ms-playwright
            ~/.cache/ms-playwright
            **/node_modules/playwright
          key: cache-playwright-${{ hashFiles('**/yarn.lock') }}
      - name: Install playwright deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install-deps

      - run: yarn test-playwright
>>>>>>> f3c95fa3de5b90859fde71cfe387dec8cc064fba

      - name: Upload videos
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: videos
          path: |
            playwright/screenshots
            playwright/videos
